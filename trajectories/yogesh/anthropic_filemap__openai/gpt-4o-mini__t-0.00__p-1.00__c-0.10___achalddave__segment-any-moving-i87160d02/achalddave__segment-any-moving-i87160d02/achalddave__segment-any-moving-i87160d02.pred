{"model_name_or_path": "gpt-4o-mini__t-0.00__p-1.00__c-0.10___achalddave__segment-any-moving-i87160d02", "instance_id": "achalddave__segment-any-moving-i87160d02", "model_patch": "diff --git a/flow/compute_flow_sequences.py b/flow/compute_flow_sequences.py\nindex 7cc6d9b..d458b79 100644\n--- a/flow/compute_flow_sequences.py\n+++ b/flow/compute_flow_sequences.py\n@@ -1,6 +1,6 @@\n \"\"\"Compute flow on videos.\"\"\"\n \n-import argparse\n+import click\n import contextlib\n import logging\n import os\n@@ -263,17 +263,10 @@ def compute_sequence_flow_gpu_helper(kwargs):\n \n \n def main():\n-    # Use first line of file docstring as description if it exists.\n-    parser = argparse.ArgumentParser(\n-        description=__doc__.split('\\n')[0] if __doc__ else '',\n-        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n-    parser.add_argument(\n-        '--input-dir',\n-        required=True,\n-        help='Directory containing a subdir for every sequence.')\n-    parser.add_argument('--output-dir', required=True)\n-    parser.add_argument(\n-        '--flow-type', choices=['flownet2', 'liteflownet'], required=True)\n+    \"\"\"Use first line of file docstring as description if it exists.\"\"\"\n+    @click.option('--input-dir', required=True, help='Directory containing a subdir for every sequence.')\n+    @click.option('--output-dir', required=True)\n+    @click.option('--flow-type', type=click.Choice(['flownet2', 'liteflownet']), required=True)\n     parser.add_argument(\n         '--recursive',\n         action='store_true',\n@@ -281,42 +274,30 @@ def main():\n                 containing a file with extension specified by --extension is\n                 treated as a sequence directory. NOTE: Does not support\n                 symlinked directories.\"\"\")\n-    parser.add_argument('--extension', default='.png')\n-    parser.add_argument(\n-        '--convert-to-angle-magnitude-png',\n-        help=('Convert flo files to angle/magnitude PNGs, and do not keep '\n-              '.flo files around.'),\n-        action='store_true')\n-    parser.add_argument('--gpus', default=[0, 1, 2, 3], nargs='*', type=int)\n-    parser.add_argument(\n-        '--num-workers',\n-        default=-1,\n-        type=int,\n-        help=('Number of workers. By default, set to the number of GPUs. '\n+    @click.option('--extension', default='.png')\n+    @click.option('--convert-to-angle-magnitude-png', is_flag=True, help=('Convert flo files to angle/magnitude PNGs, and do not keep '\n+              '.flo files around.'))\n+    @click.option('--gpus', default=[0, 1, 2, 3], multiple=True, type=int)\n+    @click.option('--num-workers', default=-1, type=int, help=('Number of workers. By default, set to the number of GPUs. '\n               'Having more workers than GPUs allows some workers to process '\n               'CPU operations, like loading input/output lists, checking '\n               'image dimensions, and converting .flo to .png while other '\n               'workers use the GPU.'))\n \n-    flownet2_parser = parser.add_argument_group('Flownet2 params')\n-    flownet2_parser.add_argument(\n-        '--flownet2-dir', help='Path to flownet2 repo.')\n-    flownet2_parser.add_argument(\n-        '--flownet2-model',\n-        default='kitti',\n-        choices=['kitti', 'sintel', 'chairs-things'])\n-\n-    liteflownet_parser = parser.add_argument_group('Liteflownet Params')\n-    liteflownet_parser.add_argument(\n-        '--liteflownet-dir', help='Path to liteflownet repo')\n-    liteflownet_parser.add_argument(\n-        '--liteflownet-model',\n-        default='liteflownet-ft-kitti',\n-        help=('Model to use for evaluation. chairs-things maps to the '\n+    @click.group()\n+    def flownet2_params():\n+        \"\"\"Flownet2 parameters.\"\"\"\n+    @click.option('--flownet2-dir', help='Path to flownet2 repo.')\n+    @click.option('--flownet2-model', default='kitti', type=click.Choice(['kitti', 'sintel', 'chairs-things']))\n+\n+    @click.group()\n+    def liteflownet_params():\n+        \"\"\"Liteflownet parameters.\"\"\"\n+    @click.option('--liteflownet-dir', help='Path to liteflownet repo')\n+    @click.option('--liteflownet-model', default='liteflownet-ft-kitti', help=('Model to use for evaluation. chairs-things maps to the '\n               '`liteflownet` model, `sintel` maps to `liteflownet-ft-sintel` '\n-              'and `kitti` maps to `liteflownet-ft-kitti`.'),\n-        choices=['chairs-things', 'sintel', 'kitti'])\n-    args = parser.parse_args()\n+              'and `kitti` maps to `liteflownet-ft-kitti`.'), type=click.Choice(['chairs-things', 'sintel', 'kitti']))\n+    args = click.get_current_context().params\n \n     input_root = Path(args.input_dir)\n     output_root = Path(args.output_dir)\n@@ -390,4 +371,4 @@ def main():\n \n \n if __name__ == \"__main__\":\n-    main()\n+    click.Command(name='compute_flow_sequences', help='Compute flow on videos.')(main)()\n\\ No newline at end of file\n"}