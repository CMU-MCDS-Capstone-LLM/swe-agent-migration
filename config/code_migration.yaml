# This template is heavily inspired by anthropic's computer use demo
agent:
  templates:
    system_template: |-
      You are a helpful code migration assistant that can interact with a computer to solve tasks.
    instance_template: |-
      <uploaded_files>
      {{working_dir}}
      </uploaded_files>
      I've uploaded a python code repository in the directory {{working_dir}}. Consider the following PR description:

      <pr_description>
      {{problem_statement}}
      </pr_description>

      **Your Task:**
      Your goal is to implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met. Please make minimal, targeted changes only to the non-test files in the {{working_dir}} directory. This means **you should not modify any test files or the logic of existing tests** unless they are directly affected by the migration.

      Follow these steps to resolve the issue:

      1. **Read and Understand Relevant Code:**
        - As a first step, identify the functions, classes, or files related to the changes required by the <pr_description>.
        - Study the logic and flow of the existing code before making changes. If the repository has README files or documentation, refer to those to get context on its functionality.

      2. **Edit the Code to Resolve the Issue:**
        - Modify the relevant **functions** or **modules** in the codebase to address the requirements in the <pr_description>. **Focus only on the areas related to the migration task.**
        - Make sure that you do not introduce unnecessary changes that are outside the scope of the problem.
        - When changing code:
          - **Completely remove deprecated code** or elements that are no longer needed. Do not simply comment them out; remove them entirely.
          - Ensure the code is **clean** and follows any style or formatting guidelines present in the repository.
        
      3. After completing the task, summarize the changes you made to the codebase using the following JSON format. When you start the summary, start with "Here is the summary of the changes in the specified JSON format":

          ```json
          {
            "files": [
              {
                "path": "<file_path>",
                "code_changes": [
                  {
                    "line": "<line_number(s)>",
                    "cardinality": "<one-to-one/one-to-many/etc.>",
                    "source_program_elements": ["<source_element>"],
                    "target_program_elements": ["<target_element>"],
                    "properties": ["<properties>"],
                    "source_apis": ["<source_api>"],
                    "target_apis": ["<target_api>"]
                  }
                ]
              }
            ]
          }
          ```

      **Guidelines for filling the JSON fields:**  
      - **Only use the predefined values** listed below. **Do not invent new terms.**  
      - If a field does not apply (e.g., if code was removed rather than modified), leave the list empty rather than filling it incorrectly.  

      **ProgramElement:**  
      - import  
      - exception  
      - function call  
      - attribute  
      - decorator  
      - function reference  
      - type  

      **Cardinality:**  
      - zero-to-one  
      - one-to-zero  
      - one-to-one  
      - one-to-many  
      - many-to-one  
      - many-to-many  
      - not applicable  

      **Property:**  
      - element name change  
      - argument addition  
      - argument deletion  
      - argument name change  
      - argument transformation  
      - async transformation  
      - output transformation  
      - parameter addition to decorated function 

      IMPORTANT TIPS:
      1. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

      2. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. 
        
      3. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file "buggy-input.png" If that doesn't work, use the linux 'find' command. 

      4. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.

      5. Before you proceed to edit, always look up for related context using `search_repo` commands. 
      
      6. Always try to use the most related and key FUNCTIONS or CLASSES as search terms when leveraging search commands.

      7. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.

      Your thinking should be thorough and so it's fine if it's very long.
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
  tools:
    bundles:
      - path: tools/registry
      - path: tools/edit_anthropic
      - path: tools/review_on_submit_m
      - path: tools/search_repo
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: true
    parse_function:
      type: function_calling
  history_processors:
    - type: cache_control
      last_n_messages: 2
